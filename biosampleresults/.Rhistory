w.seq <- c(11650, 3300, rep(x=0, times=n-2))
w.seq
tau.hat <- (M/n)*sum(w.seq)
tau.hat
#8A
#9A
#10B
#11
##Suppose the total population of a study area is τ=80 individuals.
##In a survey of the study area, the detectability is constant
##with value p=0.35. Recall that the unbiased estimator of the
##population total is τ̂ =y/p, where y is the number of individuals
##that are observed. What is the variance of the unbiased estimator
##of the population total?
tau<-80
p<-0.35
var.tau.hat<- tau*((1-p)/p)
var.tau.hat
## make nFlies bar graph
library(ggplot2)
samps<- read.csv("https://raw.githubusercontent.com/DEST-bio/DEST_freeze1/main/populationInfo/samps.csv")
stations<- unique(samps$stationId)
p<-ggplot(data = samps, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[1]
dat<-samps[which(station==currentStation)]
dat<-samps[which(samps$stationId==currentStation)]
dat
currentStation
dat
dat<-samps[which(samps$stationId==currentStation),]
dat
p<-ggplot(data = samps, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[2]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[3]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[4]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[90]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[70]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[65]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[68]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
makeFliesPlot(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(station,"NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot<- function(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot(68)
samps<- read.csv("https://raw.githubusercontent.com/DEST-bio/DEST_freeze1/main/populationInfo/samps.csv")
stations<- unique(samps$stationId)
makeFliesPlot<- function(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot(68)
makeFliesPlot(70)
for(i in 1:(length(stations)-1)){
makeFliesPlot(i)
}
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity") +
labs(title=currentStation)
makeFliesPlot<- function(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity") +
labs(title=currentStation)
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
for(i in 1:(length(stations)-1)){
makeFliesPlot(i)
}
for(i in 1:(length(stations)-1)){
makeFliesPlot(i)
}
makeFliesPlot<- function(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity") +
labs(title="Num Flies")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
for(i in 1:(length(stations)-1)){
makeFliesPlot(i)
}
currentStation<-"MBM00078922"
station<-"MBM00078922"
stations<- unique(samps$stationId)
samps$collectionDate<- as.Date(samps$collectionDate) #convert all dates to date format
# TAVG is the average temperature
# read samps.csv directly from github
samps<- read.csv("https://raw.githubusercontent.com/DEST-bio/DEST_freeze1/main/populationInfo/samps.csv")
stations<- unique(samps$stationId)
samps$collectionDate<- as.Date(samps$collectionDate) #convert all dates to date format
# TAVG is the average temperature
# read samps.csv directly from github
samps<- read.csv("https://raw.githubusercontent.com/DEST-bio/DEST_freeze1/main/populationInfo/samps.csv")
stations<- unique(samps$stationId)
samps$collectionDate<- as.Date(samps$collectionDate) #convert all dates to date format
#start loop, length-1 to exclude Wolbachia
makePlot<- function(x){
station<- stations[x]
currentStation<- stations[x]
index<- which(samps$stationId == currentStation)
dates<- samps$collectionDate[index] # array of all the days of one station id
minDate<- min(dates) # get the min date
maxDate<- max(dates) # get the max date
#if only one data point in the station, get a year of data around it
if(length(dates)==1) {
minDate<- seq(dates, length = 2, by = "-6 months")[2]
maxDate<- seq(dates, length = 2, by = "+6 months")[2]
}
#gets indices from the given station
# minIndex<- which(currentStation & samps$collectionDate==minDate)
# maxIndex<- which(currentStation & samps$collectionDate==maxDate)
#handle if tavg exists
if(!empty(data.frame(rbind.fill(ghcnd_search(stationid = station, date_min = minDate, date_max = maxDate)))) ){
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
} else {
#calculate the tavg if it doesn't already exist
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
}
#create plot
fileName<- paste0(station,".jpg")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
ggsave(fileName, plot=p, path="~/Downloads/")
#p<- ggplotly(p) %>% config(displayModeBar = F) %>% layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
#saveWidget(p,file=paste0("~/Downloads/widget",station,".html"))
}##end function
station
currentStation
index
index<- which(samps$stationId == currentStation)
index
dates<- samps$collectionDate[index] # array of all the days of one station id
minDate<- min(dates) # get the min date
maxDate<- max(dates) # get the max date
minDate
maxDate
#handle if tavg exists
if(!empty(data.frame(rbind.fill(ghcnd_search(stationid = station, date_min = minDate, date_max = maxDate)))) ){
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
} else {
#calculate the tavg if it doesn't already exist
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
}
library(plyr)
#handle if tavg exists
if(!empty(data.frame(rbind.fill(ghcnd_search(stationid = station, date_min = minDate, date_max = maxDate)))) ){
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
} else {
#calculate the tavg if it doesn't already exist
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
}
library(rnoaa)
library(dplyr)
library(plyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)
#handle if tavg exists
if(!empty(data.frame(rbind.fill(ghcnd_search(stationid = station, date_min = minDate, date_max = maxDate)))) ){
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
} else {
#calculate the tavg if it doesn't already exist
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
}
#create plot
fileName<- paste0(station,".jpg")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates)
#create plot
fileName<- paste0(station,".jpg")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
ghcnd_search(station)
ghcnd_search(station)$tavg$date
max(ghcnd_search(station)$tavg$date)
maxDate
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
ghcnd_search(station)$tavg$date
which(ghcnd_search(station)$tavg$date==maxDate)
ghcnd_search(station,date_min = minDate,date_max = maxDate)
dat<-ghcnd_search(station,var="TAVG")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat<- data.frame(dat)
dat
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
dat
maxDate
minDate
dat<-ghcnd_search(station,date_min = "2014-01-01",var="TAVG")
dat
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
dat
dat<- data.frame(dat)
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
dat
minDate
maxDate
library(SeqArray)
library(ggplot2)
library(data.table)
setwd("~/Downloads/GitHub/simCline/biosampleresults/")
gds.output <- "~/Downloads/GitHub/simCline/biosampleresults/pooled.gds"
gds.file <- seqOpen(gds.output)
snp.dt <- data.table(chr=seqGetData(gds.file, "chromosome"),
pos=seqGetData(gds.file, "position"),
nAlleles=seqGetData(gds.file, "$num_allele"),
id=seqGetData(gds.file, "variant.id"),
seqMissing(gds.file, per.variant=T))
# filter where not dmels
snp.dt <- snp.dt[grepl("Dsim_Scf_2L|Dsim_Scf_2R|Dsim_Scf_3L|Dsim_Scf_3R", chr)]
# keep only where 2 alleles
nAlleles=seqGetData(gds.file, "$num_allele")
# get ids for previous filters
ids <- snp.dt[nAlleles==2]$id
seqSetFilter(gds.file, variant.id=ids)
####sample 100,000 ids
# samp.ids <- as.numeric(sample(x=as.character(snp.dt[nAlleles==2]$id), size=10000))
# seqSetFilter(gds.file, variant.id=samp.ids)
####
adList<- seqGetData(gds.file, "annotation/format/AD")
rdList<- seqGetData(gds.file, "annotation/format/RD")
# compile variables of interest
dat <- data.table(population=rep(seqGetData(gds.file, "sample.id"), dim(adList$data)[2]),
variant.id=rep(seqGetData(gds.file, "variant.id"), each=dim(adList$data)[1]),
ad=expand.grid(adList$data)$Var1,
rd=expand.grid(rdList$data)$Var1,
position=seqGetData(gds.file,"position"),
chromosome=seqGetData(gds.file,"chromosome")
)
dat[,freqAlt:=ad/(ad+rd)]
#get unique chromosome and snps per chromosome
chroms<- unique(dat$chromosome)
length(chroms)
numSnpsList<- list()
for(i in 0:length(chroms) ){
numSnpsList[i]<- length(which(dat$chromosome==chroms[i]))
}
#snps per chromosome as a table
numSnps<- data.table(Chromosome=chroms,numSnps=numSnpsList)
numSnps
##remove palmieri
dat<- dat[-(which(population=="Palmieri:NA:NA:Africa:Mar:19:1998:M252-DNA"))]
#missing rate, mean RD, median RD, lower5th/upper 95th quantile, per population
dat.ag <- dat[,list(propMissing=mean(rd==0, na.rm=T), aveRD=mean(rd, na.rm=T), medRD=as.double(median(rd,na.rm=T)),
lower5=quantile(rd, 0.05, na.rm=T), upper95=quantile(rd, 0.95, na.rm=T) ),
list(population)]
#avg alt depth, freq alt per SNP
## include columns for chromosome and position
dat.ag2 <- dat[,list(nmissing=mean(is.na(ad)), aveAD=mean(ad, na.rm=T), freqAlt=sum(ad, na.rm=T)/sum(ad+rd, na.rm=T),
chrom= chromosome, pos= position),
list(variant.id)]
p<- ggplot(data=dat.ag, aes(x=propMissing,y=aveRD)) + geom_point()
p
# nmissing histogram per snp
q<- ggplot(data=dat.ag2, aes(x=nmissing)) + geom_boxplot()
q
### Make summary table
# check some quantiles for nmissing
quantile(dat.ag2$nmissing, c(.75,.8,.9,.95))
threshold<- quantile(dat.ag2$nmissing, .9) # set threshold
# sets list of variant id, then whether it passed the missing threshold or not
nmissingPassed<- data.frame(chrom=dat.ag2$chrom,
pos=dat.ag2$pos,
var.id=dat.ag2$variant.id,
nmissing= dat.ag2$nmissing,
thresholdPass= dat.ag2$nmissing<=threshold)
nmissingPassed2<- data.frame(var.id=dat.ag2$variant.id,
nmissing= dat.ag2$nmissing,
thresholdPass= dat.ag2$nmissing<=threshold)
nmissingPassed2
library(dplyr)
nmissingPassed2<- distinct(data.frame(var.id=dat.ag2$variant.id,
nmissing= dat.ag2$nmissing,
thresholdPass= dat.ag2$nmissing<=threshold))
nmissingPassed2
# nmissing histogram per snp
q<- ggplot(data=dat.ag2, aes(x=nmissing)) + geom_histogram()
q
nmissingPassed
nmissingPassed2
p
q
v
numSnpsList<- list()
for(i in 0:length(chroms) ){
numSnpsList[i]<- length(which(dat$chromosome==chroms[i]))
}
#snps per chromosome as a table
numSnps<- data.table(Chromosome=chroms,numSnps=numSnpsList)
numSnps
dimm(dat)
dim(dat)
### Make summary table
# check some quantiles for nmissing
quantile(dat.ag2$nmissing, c(.75,.8,.9,.95))
length(unique(dat$var.id))
unique(dat$var.id)
length(unique(dat$variant.id))
#avg alt depth, freq alt per SNP
## include columns for chromosome and position
dat.ag2 <- dat[,list(nmissing=mean(is.na(ad)), aveAD=mean(ad, na.rm=T), freqAlt=sum(ad, na.rm=T)/sum(ad+rd, na.rm=T),
chrom= chromosome[0], pos= position[0]),
list(variant.id)]
dat(dat.ag2)
dim(dat.ag2)
head(dat.ag2)
#avg alt depth, freq alt per SNP
## include columns for chromosome and position
dat.ag2 <- dat[,list(nmissing=mean(is.na(ad)), aveAD=mean(ad, na.rm=T), freqAlt=sum(ad, na.rm=T)/sum(ad+rd, na.rm=T),
chrom= chromosome[1], pos= position[1]),
list(variant.id)]
dim(dat.ag2)
head(dat.ag2)
q<- ggplot(data=dat.ag2, aes(x=nmissing)) + geom_histogram()
q
v<- ggplot(data=dat.ag2, aes(x=freqAlt)) + geom_histogram()
v
### Make summary table
# check some quantiles for nmissing
quantile(dat.ag2$nmissing, c(.75,.8,.9,.95))
# sets list of variant id, then whether it passed the missing threshold or not
nmissingPassed<- data.frame(chrom=dat.ag2$chrom,
pos=dat.ag2$pos,
var.id=dat.ag2$variant.id,
nmissing= dat.ag2$nmissing,
thresholdPass= dat.ag2$nmissing<=threshold)
#summary of nmissing by variant id, remove pos and chrom info
nmissingPassed2<- distinct(data.frame(var.id=dat.ag2$variant.id,
nmissing= dat.ag2$nmissing,
thresholdPass= dat.ag2$nmissing<=threshold))
head(nmissingPassed)
table(nmissingPassed$thresholdPass)
prop.table(table(nmissingPassed$thresholdPass))
head(dat.ag2)
