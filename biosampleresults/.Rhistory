29400/4
21500/3 + 10200/4
M<- 190
n<- 18
fpc <- (M - n) / M
w.seq <- c(11650, 3300, rep(x=0, times=n-2))
w.seq
tau.hat <- (M/n)*sum(w.seq)
tau.hat
#8A
#9A
#10B
#11
##Suppose the total population of a study area is τ=80 individuals.
##In a survey of the study area, the detectability is constant
##with value p=0.35. Recall that the unbiased estimator of the
##population total is τ̂ =y/p, where y is the number of individuals
##that are observed. What is the variance of the unbiased estimator
##of the population total?
tau<-80
p<-0.35
var.tau.hat<- tau*((1-p)/p)
var.tau.hat
## make nFlies bar graph
library(ggplot2)
samps<- read.csv("https://raw.githubusercontent.com/DEST-bio/DEST_freeze1/main/populationInfo/samps.csv")
stations<- unique(samps$stationId)
p<-ggplot(data = samps, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[1]
dat<-samps[which(station==currentStation)]
dat<-samps[which(samps$stationId==currentStation)]
dat
currentStation
dat
dat<-samps[which(samps$stationId==currentStation),]
dat
p<-ggplot(data = samps, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[2]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[3]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[4]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[90]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[70]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[65]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
currentStation<-stations[68]
dat<-samps[which(samps$stationId==currentStation),]
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
makeFliesPlot(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(station,"NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot<- function(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot(68)
samps<- read.csv("https://raw.githubusercontent.com/DEST-bio/DEST_freeze1/main/populationInfo/samps.csv")
stations<- unique(samps$stationId)
makeFliesPlot<- function(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
makeFliesPlot(68)
makeFliesPlot(70)
for(i in 1:(length(stations)-1)){
makeFliesPlot(i)
}
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity") +
labs(title=currentStation)
makeFliesPlot<- function(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity") +
labs(title=currentStation)
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
for(i in 1:(length(stations)-1)){
makeFliesPlot(i)
}
for(i in 1:(length(stations)-1)){
makeFliesPlot(i)
}
makeFliesPlot<- function(i){
currentStation<-stations[i]
dat<-samps[which(samps$stationId==currentStation),]
fileName<- paste0(currentStation,"_NFLIES.jpg")
p<-ggplot(data = dat, aes(x=collectionDate,y=nFlies)) +
geom_bar(stat="identity") +
labs(title="Num Flies")
p
ggsave(fileName, plot=p, path="~/Downloads/")
}
for(i in 1:(length(stations)-1)){
makeFliesPlot(i)
}
currentStation<-"MBM00078922"
station<-"MBM00078922"
stations<- unique(samps$stationId)
samps$collectionDate<- as.Date(samps$collectionDate) #convert all dates to date format
# TAVG is the average temperature
# read samps.csv directly from github
samps<- read.csv("https://raw.githubusercontent.com/DEST-bio/DEST_freeze1/main/populationInfo/samps.csv")
stations<- unique(samps$stationId)
samps$collectionDate<- as.Date(samps$collectionDate) #convert all dates to date format
# TAVG is the average temperature
# read samps.csv directly from github
samps<- read.csv("https://raw.githubusercontent.com/DEST-bio/DEST_freeze1/main/populationInfo/samps.csv")
stations<- unique(samps$stationId)
samps$collectionDate<- as.Date(samps$collectionDate) #convert all dates to date format
#start loop, length-1 to exclude Wolbachia
makePlot<- function(x){
station<- stations[x]
currentStation<- stations[x]
index<- which(samps$stationId == currentStation)
dates<- samps$collectionDate[index] # array of all the days of one station id
minDate<- min(dates) # get the min date
maxDate<- max(dates) # get the max date
#if only one data point in the station, get a year of data around it
if(length(dates)==1) {
minDate<- seq(dates, length = 2, by = "-6 months")[2]
maxDate<- seq(dates, length = 2, by = "+6 months")[2]
}
#gets indices from the given station
# minIndex<- which(currentStation & samps$collectionDate==minDate)
# maxIndex<- which(currentStation & samps$collectionDate==maxDate)
#handle if tavg exists
if(!empty(data.frame(rbind.fill(ghcnd_search(stationid = station, date_min = minDate, date_max = maxDate)))) ){
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
} else {
#calculate the tavg if it doesn't already exist
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
}
#create plot
fileName<- paste0(station,".jpg")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
ggsave(fileName, plot=p, path="~/Downloads/")
#p<- ggplotly(p) %>% config(displayModeBar = F) %>% layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
#saveWidget(p,file=paste0("~/Downloads/widget",station,".html"))
}##end function
station
currentStation
index
index<- which(samps$stationId == currentStation)
index
dates<- samps$collectionDate[index] # array of all the days of one station id
minDate<- min(dates) # get the min date
maxDate<- max(dates) # get the max date
minDate
maxDate
#handle if tavg exists
if(!empty(data.frame(rbind.fill(ghcnd_search(stationid = station, date_min = minDate, date_max = maxDate)))) ){
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
} else {
#calculate the tavg if it doesn't already exist
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
}
library(plyr)
#handle if tavg exists
if(!empty(data.frame(rbind.fill(ghcnd_search(stationid = station, date_min = minDate, date_max = maxDate)))) ){
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
} else {
#calculate the tavg if it doesn't already exist
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
}
library(rnoaa)
library(dplyr)
library(plyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)
#handle if tavg exists
if(!empty(data.frame(rbind.fill(ghcnd_search(stationid = station, date_min = minDate, date_max = maxDate)))) ){
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
} else {
#calculate the tavg if it doesn't already exist
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
}
#create plot
fileName<- paste0(station,".jpg")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat<- data.frame(ghcnd_search(station,date_min = minDate, date_max=maxDate, var=c("TMAX","TMIN")))
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
dat$date<- dat$tmin.date
datIndex<- which(dat$date %in% dates)
#create plot
fileName<- paste0(station,".jpg")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
ghcnd_search(station)
ghcnd_search(station)$tavg$date
max(ghcnd_search(station)$tavg$date)
maxDate
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
dat$tavg<- dat$tavg/10
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
ghcnd_search(station)$tavg$date
which(ghcnd_search(station)$tavg$date==maxDate)
ghcnd_search(station,date_min = minDate,date_max = maxDate)
dat<-ghcnd_search(station,var="TAVG")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat<- data.frame(dat)
dat
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat$tavg<- (dat$tmax.tmax -dat$tmin.tmin)/2
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
dat
maxDate
minDate
dat<-ghcnd_search(station,date_min = "2014-01-01",var="TAVG")
dat
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
dat
datIndex<- which(dat$date %in% dates) #subset all dates in the range to the collectionDate
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
dat
dat<- data.frame(dat)
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
colnames(dat)<- c("id","tavg","date","mflag","qflag","sflag")
dat$tavg<- dat$tavg/10 #divide by 10 to get whole number degrees
# jpeg(fileName)
p<- ggplot(data= dat, aes(x=date,y=tavg)) +
geom_line(color="#69b3a2") +
geom_point(data= dat[datIndex,], color="red", size=3) +
labs(title=station, y="Average Daily Temperature (C)", x="Date")
p
#get relevant data
dat<- data.frame(ghcnd_search(station, date_min = minDate, date_max = maxDate, var="TAVG"))
dat
minDate
maxDate
library(ggplot2)
library(scales)
T1DGC_6 <- read.table("D:/T1DGC/USERS/cat7ep/chr6.info", sep = "", header = T)
T1DGC_6 <- read.table("D:/m/CPHG/T1DGC/USERS/cat7ep/chr6.info", sep = "", header = T)
T1DGC_6 <- read.table("D:/USERS/cat7ep/chr6.info", sep = "", header = T)
ggplot( T1DGC_6 , aes(x = Rsq, y = MAF)) +
geom_point(size = 1.5, color = "black", fill="black") +
labs(x = "Rsq", y = "MAF") +
ggtitle("Chromosome 6 (T1DGC)") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
T1DGC[T1DGC['MAF']]
T1DGC_6[T1DGC_6['MAF']>0.3]
T1DGC_6 <- read.table("/m/CPHG/T1DGC/USERS/cat7ep/chr6.info", sep = "", header = T)
length(T1DGC_6)
library(SeqArray)
library(ggplot2)
library(data.table)
library(dplyr)
setwd("~/Downloads/GitHub/simCline/biosampleresults/")
gds.output <- "./pooled.gds"
gds.file <- seqOpen(gds.output)
snp.dt <- data.table(chr=seqGetData(gds.file, "chromosome"),
pos=seqGetData(gds.file, "position"),
nAlleles=seqGetData(gds.file, "$num_allele"),
id=seqGetData(gds.file, "variant.id"),
seqMissing(gds.file, per.variant=T))
# filter where not dmels
snp.dt <- snp.dt[grepl("Dsim_Scf_2L|Dsim_Scf_2R|Dsim_Scf_3L|Dsim_Scf_3R|Dsim_Scf_X", chr)]
nAlleles=seqGetData(gds.file, "$num_allele")
# get ids for previous filters
ids <- snp.dt[nAlleles==2]$id
seqSetFilter(gds.file, variant.id=ids)
adList<- seqGetData(gds.file, "annotation/format/AD")
rdList<- seqGetData(gds.file, "annotation/format/RD")
# compile variables of interest
dat <- data.table(population=rep(seqGetData(gds.file, "sample.id"), dim(adList$data)[2]),
variant.id=rep(seqGetData(gds.file, "variant.id"), each=dim(adList$data)[1]),
ad=expand.grid(adList$data)$Var1,
rd=expand.grid(rdList$data)$Var1,
position=seqGetData(gds.file,"position"),
chromosome=seqGetData(gds.file,"chromosome")
)
dat[,freqAlt:=ad/(ad+rd)]
dat[,newCol:=paste(ad,rd,sep=",")]
datw <- dcast(dat, variant.id~population, value.var=“newCol”)
datw <- dcast(dat, variant.id~population, value.var=“colCol”)
datw <- dcast(dat, variant.id~population, value.var="colCol")
datw <- dcast(dat, variant.id~population, value.var="newCol")
datw
datw[0]
datw[1]
datw[[0]]
datw[[1]]
datw[[2]]
unique(datw[[2]])
dat
datw <- dcast(dat, variant.id~population, value.var="newCol")
datw ## output for TreeMix
unique(datw)
unique(datw[[1]])
unique(datw[[2]])
unique(datw[[3]])
unique(datw[[4]])
datw <- dcast(dat, variant.id, value.var="newCol")
dat
datw <- dcast(dat, population~variant.id, value.var="newCol")
datw
datw
head(datw)
install.packages("reshape2")
dat
head(Datw)
head(datw)
datw <- dcast(dat, variant.id ~ population, value.var="newCol")
head(datw)
datw_test <- dcast(dat,variant.id ~ population, value.var="ad")
head(datw_test)
data.class(dat$ad)
library(ChickWeight)
install.packages("ChickWeight")
library(ChickWeight)
library(carData)
carData
cars
datw <- dcast(dat, variant.id ~ population, value.var="newCol", fun.aggregate = NULL)
datw <- dcast(dat, variant.id ~ population, value.var="newCol", fill=T)
head(datw)
unique(datw$`Barghi:Tallahassee:Florida:North_America:Nov:NA:2010:Dsim_Fl_Base_1`)
dat$newCol
datw <- dcast(dat, variant.id ~ population, value.var="newCol", fun.aggregate = sum)
datw <- dcast(dat, variant.id ~ population, fun.aggregate = sum, value.var="newCol")
datw <- dcast(dat, variant.id ~ population, fun.aggregate = list(sum), value.var="newCol")
?dcast
dat
dat[dat$variant.id=="895805"]
datw_test <- dcast(dat, variant.id ~ population, value.var="newCol", drop=FALSE)
head(datw_test)
unique(datw_test$ES_Gim_14_34)
unique(datw_test$`Sedghifar:Fairfield:Maine:North_America:Sep:NA:2011:D._sim_Maine`)
datw_test <- dcast(dat, variant.id ~ population, value.var="newCol", drop=FALSE,fill"NA,NA")
datw_test <- dcast(dat, variant.id ~ population, value.var="newCol", drop=FALSE,fill="NA,NA")
head(datw_test)
datw_test <- dcast(dat, variant.id ~ population, value.var="ad", drop=FALSE,fill="NA,NA")
head(datw_test)
datw_test <- dcast(dat, variant.id ~ population, value.var="ad")
head(datw_test)
unique(datw_test$ES_Gim_14_35)
unique(datw_test$ES_Gim_16_33)
datw_test <- dcast(dat, ... ~ population, value.var="ad")
head(datw_test)
datw_test <- dcast(dat, variant.id ~ "population", value.var="ad")
head(datw_test)
datw_test <- dcast(dat, variant.id ~ "population", value.var="newCol")
head(datw_test)
datw_test <- dcast(dat, variant.id ~ population, value.var=newCol)
datw_test <- dcast(dat, "variant.id" ~ "population", value.var="newCol")
head(datw_test)
data.class(dat$variant.id)
data.class(dat$population)
data.class(dat$newCol)
datw_test <- dcast(dat, variant.id ~ "population", value.var="newCol")
head(datw_test)
datw_test <- dcast(dat, . ~ population, value.var="newCol")
head(datw_test)
datw_test <- dcast(dat, variant.id ~ population, value.var="newCol")
head(datw_test)
datw_test <- dcast(dat, variant.id+ad ~ population, value.var="newCol")
head(datw_test)
head(datw)
output.individ <- "./individ.gds"
individ.gds <- seqOpen(output.individ)
